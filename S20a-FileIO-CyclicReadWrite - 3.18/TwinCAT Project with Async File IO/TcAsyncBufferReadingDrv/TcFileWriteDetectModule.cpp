///////////////////////////////////////////////////////////////////////////////
// TcFileWriteDetectModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "TcFileWriteDetectModule.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CTcFileWriteDetectModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CTcFileWriteDetectModule
BEGIN_INTERFACE_MAP(CTcFileWriteDetectModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CTcFileWriteDetectModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CTcFileWriteDetectModule)
IMPLEMENT_ITCADI(CTcFileWriteDetectModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CTcFileWriteDetectModule 
BEGIN_SETOBJPARA_MAP(CTcFileWriteDetectModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CTcFileWriteDetectModule 
BEGIN_GETOBJPARA_MAP(CTcFileWriteDetectModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CTcFileWriteDetectModule
BEGIN_OBJDATAAREA_MAP(CTcFileWriteDetectModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(0, m_Inputs)
	OBJDATAAREA_VALUE(1, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CTcFileWriteDetectModule::CTcFileWriteDetectModule()
	: m_counter(0)
	, m_bBusy(FALSE)
	, m_Trace(m_TraceLevelMax, m_spSrv)
{
	memset(&m_Inputs, 0, sizeof(m_Inputs)); 
	memset(&m_Outputs, 0, sizeof(m_Outputs)); 
}

///////////////////////////////////////////////////////////////////////////////
CTcFileWriteDetectModule::~CTcFileWriteDetectModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CTcFileWriteDetectModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CTcFileWriteDetectModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CTcFileWriteDetectModule::SetObjStateSO()
{
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization

	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CTcFileWriteDetectModule::SetObjStateOS()
{
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CTcFileWriteDetectModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////
// ITcCyclic
///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CTcFileWriteDetectModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	if (!m_Inputs.bBusy && m_bBusy)
	{
		// detected falling edge on busy input
		if (!m_Inputs.bError)
		{
			m_Outputs.bExecuteOut = TRUE; 
			m_Outputs.nOffset = m_nOffset;
			m_nOffset = m_Inputs.nBytesWritten;
		}
	}

	if (m_Inputs.bBusy && !m_bBusy)
	{
		// detected raising edge on busy input
		m_Outputs.bExecuteOut = FALSE;
		m_Outputs.nOffset = 0;
	}
	
	m_bBusy = m_Inputs.bBusy;

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CTcFileWriteDetectModule::AddModuleToCaller()
{
	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CTcFileWriteDetectModule::RemoveModuleFromCaller()
{
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
}


