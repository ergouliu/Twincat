///////////////////////////////////////////////////////////////////////////////
// TcAsyncFileFindModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "TcAsyncFileFindModule.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CTcAsyncFileFindModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CTcAsyncFileFindModule
BEGIN_INTERFACE_MAP(CTcAsyncFileFindModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CTcAsyncFileFindModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CTcAsyncFileFindModule)
IMPLEMENT_ITCADI(CTcAsyncFileFindModule)
IMPLEMENT_ITCWATCHSOURCE(CTcAsyncFileFindModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CTcAsyncFileFindModule 
BEGIN_SETOBJPARA_MAP(CTcAsyncFileFindModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_TcAsyncFileFindModuleParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_TcAsyncFileFindModuleFilePath, m_FilePath)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CTcAsyncFileFindModule 
BEGIN_GETOBJPARA_MAP(CTcAsyncFileFindModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_TcAsyncFileFindModuleParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_TcAsyncFileFindModuleFilePath, m_FilePath)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CTcAsyncFileFindModule
BEGIN_OBJPARAWATCH_MAP(CTcAsyncFileFindModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CTcAsyncFileFindModule
BEGIN_OBJDATAAREA_MAP(CTcAsyncFileFindModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_TcAsyncFileFindModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_TcAsyncFileFindModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CTcAsyncFileFindModule::CTcAsyncFileFindModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
	, m_fsmFileFind(m_TraceLevelMax)
{
	m_TraceLevelMax = tlAlways;
///<AutoGeneratedContent id="MemberInitialization">
///</AutoGeneratedContent>

	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(m_FilePath, 0, sizeof(m_FilePath));
}

///////////////////////////////////////////////////////////////////////////////
CTcAsyncFileFindModule::~CTcAsyncFileFindModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CTcAsyncFileFindModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CTcAsyncFileFindModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = m_spSrv->TcCreateInstance(CID_TcFileAccessAsync, m_spFileAccessAsync.GetIID(), (PPVOID)(&m_spFileAccessAsync));

	if (SUCCEEDED(hr))
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccessAsync;

		OTCID oid = m_spCyclicCaller.GetOID();
		hr = FAILED(hr) ? hr : spFileAccessObj->TcSetObjPara(PID_TcFileAccessAsyncAdsProvider, sizeof(oid), &oid);
		if (m_Parameter.SegmentSize == 0)
		{
			hr = ADS_E_INVALIDPARM;
		}
		hr = FAILED(hr) ? hr : spFileAccessObj->TcSetObjPara(PID_TcFileAccessAsyncSegmentSize, sizeof(m_Parameter.SegmentSize), &m_Parameter.SegmentSize);
		hr = FAILED(hr) ? hr : spFileAccessObj->TcSetObjPara(PID_TcFileAccessAsyncTimeoutMs, sizeof(m_Parameter.Timeout), &m_Parameter.Timeout);
		hr = FAILED(hr) ? hr : spFileAccessObj->TcSetObjState(TCOM_STATE_SAFEOP, m_spSrv, NULL);
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CTcAsyncFileFindModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization
	if (SUCCEEDED(hr))
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccessAsync;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_OP, m_spSrv, NULL);
	}


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CTcAsyncFileFindModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CTcAsyncFileFindModule::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	
	m_spFileAccessAsync = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CTcAsyncFileFindModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	// TODO: Add your cyclic code here
	m_counter;
	if ((m_Inputs.bExecute == true) && (m_Outputs.bBusy == false))
	{
		hr =
			m_fsmFileFind.Init
			(
				m_spSrv,
				m_spFileAccessAsync,
				m_FilePath
			);
		m_Outputs.bBusy = true;
		m_Inputs.bExecute = false; 
	}

	if (m_fsmFileFind.IsActive())
	{
		hr = m_fsmFileFind.Eval();
		if (FAILED_AND_NOT_PENDING(hr))
		{
		}
		else if (SUCCEEDED(hr))
		{
		}
	}
	else 
	{
		m_Outputs.bBusy = false;
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CTcAsyncFileFindModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CTcAsyncFileFindModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

